// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl String?
    firstName String?
    lastName String?

    emailAddress String @unique
    
    credits Int @default(150)
    userToProject UserToProject[]

    questionsAsked Question[]
}


enum AuthType {
  Google
  Github
}

model Project {
    id                          String @id @default(uuid())
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt

    name                        String
    githubUrl                   String

    deletedAt                   DateTime?
    userToProject               UserToProject[]
    commits                     Commit[]
    sourceCodeEmbeddings        SourceCodeEmbedding[]
    savedQuestion               Question[]
    pullrequests                Pr[]
}

model UserToProject {
    id              String    @id @default(uuid())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    userId          String
    projectId       String

    user            User      @relation(fields: [userId],references: [id])
    savedproject    Project   @relation(fields: [projectId],references: [id])

    @@unique([userId,projectId])
}

model Question {
    id                  String   @id @default(uuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    question            String
    answer              String

    filesReferences     Json?

    projectId           String
    project             Project   @relation(fields: [projectId],references: [id])

    userId              String
    user                User      @relation(fields: [userId],references: [id])

}

model Commit {
    id                  String   @id @default(uuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    projectId           String
    project             Project   @relation(fields: [projectId],references: [id])
    
    commitMessage       String
    commitHash          String
    commitAuthorName    String
    commitAuthorAvtar   String
    commitDate          DateTime
    //
    summary             String
 }

  model Pr {
    id                  String   @id @default(uuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    projectId           String
    project             Project  @relation(fields: [projectId],references: [id])
    
    pullReqTitle        String
    pullReqMessage      String
    pullReqHash         String
    pullReqAuthorName   String
    pullReqAuthorAvtar  String
    pullReqDate         DateTime

    summary             String
 }

 model SourceCodeEmbedding {
    id                  String  @id @default(uuid())

    summaryEmbedding    Float[]
    sourceCode          String
    fileName            String
    summary             String

    projectId           String
    project             Project @relation(fields: [projectId],references: [id])
 }